{"ast":null,"code":"var isLocalhost = Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl);\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://goo.gl/SC7cgQ');\n        });\n      } else {\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            console.log('New content is available; please refresh.');\n          } else {\n            console.log('Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  fetch(swUrl).then(function (response) {\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/hughkohl/Documents/Documents/Coding_Bootcamp/Projects/Portfolio/Portfolio-HK/client/src/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      window.location.hostname === '[::1]' ||\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          checkValidServiceWorker(swUrl);\n  \n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n\n                console.log('New content is available; please refresh.');\n              } else {\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    fetch(swUrl)\n      .then(response => {\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}