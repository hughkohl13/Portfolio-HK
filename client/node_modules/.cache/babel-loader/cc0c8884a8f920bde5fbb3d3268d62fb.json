{"ast":null,"code":"// const isLocalhost = Boolean(\n//     window.location.hostname === 'localhost' ||\n//       window.location.hostname === '[::1]' ||\n//       window.location.hostname.match(\n//         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//       )\n//   );\n//   export default function register() {\n//     if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//       const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n//       if (publicUrl.origin !== window.location.origin) {\n//         return;\n//       }\n//       window.addEventListener('load', () => {\n//         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n//         if (isLocalhost) {\n//           checkValidServiceWorker(swUrl);\n//           navigator.serviceWorker.ready.then(() => {\n//             console.log(\n//               'This web app is being served cache-first by a service ' +\n//                 'worker. To learn more, visit https://goo.gl/SC7cgQ'\n//             );\n//           });\n//         } else {\n//           registerValidSW(swUrl);\n//         }\n//       });\n//     }\n//   }\n//   function registerValidSW(swUrl) {\n//     navigator.serviceWorker\n//       .register(swUrl)\n//       .then(registration => {\n//         registration.onupdatefound = () => {\n//           const installingWorker = registration.installing;\n//           installingWorker.onstatechange = () => {\n//             if (installingWorker.state === 'installed') {\n//               if (navigator.serviceWorker.controller) {\n//                 console.log('New content is available; please refresh.');\n//               } else {\n//                 console.log('Content is cached for offline use.');\n//               }\n//             }\n//           };\n//         };\n//       })\n//       .catch(error => {\n//         console.error('Error during service worker registration:', error);\n//       });\n//   }\n//   function checkValidServiceWorker(swUrl) {\n//     fetch(swUrl)\n//       .then(response => {\n//         if (\n//           response.status === 404 ||\n//           response.headers.get('content-type').indexOf('javascript') === -1\n//         ) {\n//           navigator.serviceWorker.ready.then(registration => {\n//             registration.unregister().then(() => {\n//               window.location.reload();\n//             });\n//           });\n//         } else {\n//           registerValidSW(swUrl);\n//         }\n//       })\n//       .catch(() => {\n//         console.log(\n//           'No internet connection found. App is running in offline mode.'\n//         );\n//       });\n//   }\n//   export function unregister() {\n//     if ('serviceWorker' in navigator) {\n//       navigator.serviceWorker.ready.then(registration => {\n//         registration.unregister();\n//       });\n//     }\n//   }","map":{"version":3,"sources":["/Users/hughkohl/Documents/Documents/Coding_Bootcamp/Projects/Portfolio/Portfolio-HK/client/src/registerServiceWorker.js"],"names":[],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\n\n// const isLocalhost = Boolean(\n//     window.location.hostname === 'localhost' ||\n//       window.location.hostname === '[::1]' ||\n//       window.location.hostname.match(\n//         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//       )\n//   );\n  \n//   export default function register() {\n//     if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//       const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n//       if (publicUrl.origin !== window.location.origin) {\n//         return;\n//       }\n  \n//       window.addEventListener('load', () => {\n//         const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n//         if (isLocalhost) {\n//           checkValidServiceWorker(swUrl);\n  \n//           navigator.serviceWorker.ready.then(() => {\n//             console.log(\n//               'This web app is being served cache-first by a service ' +\n//                 'worker. To learn more, visit https://goo.gl/SC7cgQ'\n//             );\n//           });\n//         } else {\n//           registerValidSW(swUrl);\n//         }\n//       });\n//     }\n//   }\n  \n//   function registerValidSW(swUrl) {\n//     navigator.serviceWorker\n//       .register(swUrl)\n//       .then(registration => {\n//         registration.onupdatefound = () => {\n//           const installingWorker = registration.installing;\n//           installingWorker.onstatechange = () => {\n//             if (installingWorker.state === 'installed') {\n//               if (navigator.serviceWorker.controller) {\n\n//                 console.log('New content is available; please refresh.');\n//               } else {\n//                 console.log('Content is cached for offline use.');\n//               }\n//             }\n//           };\n//         };\n//       })\n//       .catch(error => {\n//         console.error('Error during service worker registration:', error);\n//       });\n//   }\n  \n//   function checkValidServiceWorker(swUrl) {\n//     fetch(swUrl)\n//       .then(response => {\n//         if (\n//           response.status === 404 ||\n//           response.headers.get('content-type').indexOf('javascript') === -1\n//         ) {\n//           navigator.serviceWorker.ready.then(registration => {\n//             registration.unregister().then(() => {\n//               window.location.reload();\n//             });\n//           });\n//         } else {\n//           registerValidSW(swUrl);\n//         }\n//       })\n//       .catch(() => {\n//         console.log(\n//           'No internet connection found. App is running in offline mode.'\n//         );\n//       });\n//   }\n  \n//   export function unregister() {\n//     if ('serviceWorker' in navigator) {\n//       navigator.serviceWorker.ready.then(registration => {\n//         registration.unregister();\n//       });\n//     }\n//   }\n  "]},"metadata":{},"sourceType":"module"}